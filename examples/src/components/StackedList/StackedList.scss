////
/// Components
/// StackedList
////

@import '../../styles/utilities/layout';
@import '../Handle/props';
@import '../Halftone/props';

$stacked-list-header-padding-top: get-spacing(tighter) + ($border-size-unit / 2);
$stacked-list-header-padding-bottom: get-spacing(tighter) + $border-size-unit;

$stacked-list-min-size: 7.2rem;

.StackedListWrapper {
  // no styles
}

.StackedListHeader {
  padding: $stacked-list-header-padding-top get-spacing(tighter) $stacked-list-header-padding-bottom;
  background-color: get-color(coal, dark);

  p {
    margin-top: 0.2em;
    font-size: get-type-scale(paragraph);
    color: white;

    @media screen and (min-width: get-breakpoint(tablet)) {
      font-size: get-type-scale(paragraph, tablet);
    }

    @media screen and (min-width: get-breakpoint(desktop)) {
      font-size: get-type-scale(paragraph, desktop);
    }
  }
}

.StackedList {
  margin-top: -$border-size-unit;

  // How do you allow items to be moved back into an emptied container?
  min-width: $stacked-list-min-size;
  min-height: $stacked-list-min-size;
  box-shadow: inset 0 0 0 $border-size-unit get-color(coal);
  background-color: get-color(ash);
}

.StackedListItem {
  cursor: get-cursor();

  &:nth-child(1n+2) {
    margin-top: -$border-size-unit;
  }
}

.StackedListContent {
  position: relative;
  display: flex;
  align-items: center;
  padding: get-spacing(tighter);
  color: get-color(coal, dark);
  background-color: white;
  border: $border-size-unit solid get-color(coal, dark); // get-border();
  transition:
    color get-duration(fast) get-easing(),
    background-color get-duration(fast) get-easing(),
    border-color get-duration(fast) get-easing(),
    transform get-duration() get-easing(bungie);

  .Heading {
    flex: 1 1 auto;
  }

  .DragHandle,
  .NopeHandle {
    flex: 0 0 $handle-size;
    margin-left: get-spacing(tight);
  }

  @include halftone-bg('after');

  &::before {
    content: '';
    position: absolute;
    top: -$border-size-unit;
    right: -$border-size-unit;
    left: -$border-size-unit;
    display: block;
    height: $border-size-unit;
    background-color: get-color(coal, dark);
    opacity: 0;
    transition:
      background-color get-duration(fast) get-easing(),
      opacity get-duration(fast) get-easing();
  }
}

///
/// Sortable behaviour

.StackedListItem--isDraggable {
  cursor: get-cursor(drag);

  // interaction
  &:focus {
    outline: none;
  }

  &:focus,
  &:hover {
    .StackedListContent {
      color: get-color(brand, blue);
      border-color: currentColor;
    }

    + .StackedListItem {
      .StackedListContent::before {
        background-color: get-color(brand, blue);
        opacity: 1;
      }
    }
  }

  &.draggable-source--is-dragging {
    .StackedListContent {
      color: get-color(brand, blue);
      border-color: currentColor;

      @include halftone-bg-animated('after');
    }

    + .StackedListItem,
    + .StackedListItem--isCloned + .StackedListItem {
      .StackedListContent::before {
        background-color: get-color(brand, blue);
        opacity: 1;
      }
    }
  }

  &.draggable-mirror {
    z-index: get-z-index(overlay);

    .StackedListContent {
      color: white;
      background-color: get-color(brand, blue);
      border-color: get-color(brand, blue);
      transform: scale(1.025);

      &::before,
      &::after {
        display: none;
      }
    }

    .DragHandle {
      @include drag-handle-dragging;
    }
  }
}







$size-large: 14rem;

.StackedListWrapper--axisHorizontal {
  margin-bottom: get-spacing();

  display: flex;
  height: $size-large;

  .StackedListHeader {
    flex: 0 0 $size-large;
  }

  .StackedList {
    display: flex;
    flex: 1 1 auto;
    margin-top: 0;
    margin-left: -$border-size-unit;

    overflow-x: scroll;
  }

  .StackedListItem {
    flex: 1 0 $size-large;
    max-width: $size-large * 2;
    height: 100%;

    &:nth-child(1n+2) {
      margin-top: 0;
      margin-left: -$border-size-unit;
    }
  }

  .StackedListContent {
    flex-direction: column;
    justify-content: center;
    height: 100%;

    &::before {
      top: -$border-size-unit;
      right: auto;
      bottom: -$border-size-unit;
      left: -$border-size-unit;
      width: $border-size-unit;
      height: auto;
    }
  }

  .DragHandle,
  .NopeHandle {
    margin-left: 0;
  }
}

